name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Cancel in-progress runs for pull requests when developers push
# additional changes, and serialize builds in branches.
# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-concurrency-to-cancel-any-in-progress-job-or-run
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

# Note: if: success() is used in several jobs -
# this ensures that it only executes if all previous jobs succeeded.

# if: steps.cache-node-modules.outputs.cache-hit != 'true'
# will skip running `yarn install` if it successfully fetched from cache

jobs:
  fmt:
    name: Format with Prettier
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Node.js v16
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Fetch dependencies from cache
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: yarn-build-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-build-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: SKIP_SUBMODULE_DEPS=1 yarn --frozen-lockfile

      - name: Format files with Prettier
        run: yarn fmt

  lint-helm:
    name: Lint Helm chart
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v26.1
        with:
          files: |
            ci/helm-chart/**

      - name: Install helm
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: azure/setup-helm@v3.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install helm kubeval plugin
        if: steps.changed-files.outputs.any_changed == 'true'
        run: helm plugin install https://github.com/instrumenta/helm-kubeval

      - name: Lint Helm chart
        if: steps.changed-files.outputs.any_changed == 'true'
        run: helm kubeval ci/helm-chart

  lint-ts:
    name: Lint TypeScript files
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v26.1
        with:
          files: |
            **/*.ts
            **/*.js
          files_ignore: |
            lib/vscode/**

      - name: Install Node.js v16
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Fetch dependencies from cache
        if: steps.changed-files.outputs.any_changed == 'true'
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: yarn-build-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-build-

      - name: Install dependencies
        if: steps.changed-files.outputs.any_changed == 'true' && steps.cache-node-modules.outputs.cache-hit != 'true'
        run: SKIP_SUBMODULE_DEPS=1 yarn --frozen-lockfile

      - name: Lint TypeScript files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: yarn lint:ts

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install quilt
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: quilt
          version: 1.0

      - name: Patch Code
        run: quilt push -a

      - name: Install Node.js v16
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Fetch dependencies from cache
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: yarn-build-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-build-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      - name: Build code-server
        run: yarn build

      # Get Code's git hash.  When this changes it means the content is
      # different and we need to rebuild.
      - name: Get latest lib/vscode rev
        id: vscode-rev
        run: echo "::set-output name=rev::$(git rev-parse HEAD:./lib/vscode)"

      - name: Get version
        id: version
        run: echo "::set-output name=version::$(jq -r .version package.json)"

      # We need to rebuild when we have a new version of Code, when any of
      # the patches changed, or when the code-server version changes (since
      # it gets embedded into the code).  Use VSCODE_CACHE_VERSION to
      # force a rebuild.
      - name: Fetch prebuilt Code package from cache
        id: cache-vscode
        uses: actions/cache@v3
        with:
          path: lib/vscode-reh-web-*
          key: vscode-reh-package-${{ secrets.VSCODE_CACHE_VERSION }}-${{ steps.vscode-rev.outputs.rev }}-${{ steps.version.outputs.version }}-${{ hashFiles('patches/*.diff', 'ci/build/build-vscode.sh') }}

      - name: Build vscode
        if: steps.cache-vscode.outputs.cache-hit != 'true'
        run: yarn build:vscode

      # Our code imports code from VS Code's `out` directory meaning VS Code
      # must be built before running these tests.
      # TODO: Move to its own step?
      - name: Run code-server unit tests
        run: yarn test:unit
        if: success()


      # The release package does not contain any native modules
      # and is neutral to architecture/os/libc version.
      - name: Create release package
        run: yarn release
        if: success()

      # https://github.com/actions/upload-artifact/issues/38
      - name: Compress release package
        run: tar -czf package.tar.gz release

      - name: Upload npm package artifact
        uses: actions/upload-artifact@v3
        with:
          name: npm-package
          path: ./package.tar.gz


  # NOTE@oxy:
  # We use Ubuntu 16.04 here, so that our build is more compatible
  # with older libc versions. We used to (Q1'20) use CentOS 7 here,
  # but it has a full update EOL of Q4'20 and a 'critical security'
  # update EOL of 2024. We're dropping full support a few years before
  # the final EOL, but I don't believe CentOS 7 has a large arm64 userbase.
  # It is not feasible to cross-compile with CentOS.

  # Cross-compile notes: To compile native dependencies for arm64,
  # we install the aarch64/armv7l cross toolchain and then set it as the default
  # compiler/linker/etc. with the AR/CC/CXX/LINK environment variables.
  # qemu-user-static on ubuntu-16.04 currently doesn't run Node correctly,
  # so we just build with "native"/x86_64 node, then download arm64/armv7l node
  # and then put it in our release. We can't smoke test the cross build this way,
  # but this means we don't need to maintain a self-hosted runner!

  # NOTE@jsjoeio:
  # We used to use 16.04 until GitHub deprecated it on September 20, 2021
  # See here: https://github.com/actions/virtual-environments/pull/3862/files
  
  package-linux-cross:
    name: Linux cross-compile builds
    needs: build
    runs-on: ubuntu-18.04
    timeout-minutes: 15
    strategy:
      matrix:
        include:
          - prefix: aarch64-linux-gnu
            arch: arm64
          - prefix: arm-linux-gnueabihf
            arch: armv7l

    env:
      AR: ${{ format('{0}-ar', matrix.prefix) }}
      CC: ${{ format('{0}-gcc', matrix.prefix) }}
      CXX: ${{ format('{0}-g++', matrix.prefix) }}
      LINK: ${{ format('{0}-g++', matrix.prefix) }}
      NPM_CONFIG_ARCH: ${{ matrix.arch }}
      NODE_VERSION: v16.13.0

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Node.js v16
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install nfpm
        run: |
          mkdir -p ~/.local/bin
          curl -sSfL https://github.com/goreleaser/nfpm/releases/download/v2.3.1/nfpm_2.3.1_`uname -s`_`uname -m`.tar.gz | tar -C ~/.local/bin -zxv nfpm
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install cross-compiler
        run: sudo apt update && sudo apt install $PACKAGE
        env:
          PACKAGE: ${{ format('g++-{0}', matrix.prefix) }}

      - name: Download npm package
        uses: actions/download-artifact@v3
        with:
          name: npm-package

      - name: Decompress npm package
        run: tar -xzf package.tar.gz

      - name: Build standalone release
        run: yarn release:standalone

      - name: Replace node with cross-compile equivalent
        run: |
          wget https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}-linux-${NPM_CONFIG_ARCH}.tar.xz
          tar -xf node-${NODE_VERSION}-linux-${NPM_CONFIG_ARCH}.tar.xz node-${NODE_VERSION}-linux-${NPM_CONFIG_ARCH}/bin/node --strip-components=2
          mv ./node ./release-standalone/lib/node

      - name: Build packages with nfpm
        run: yarn package ${NPM_CONFIG_ARCH}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-packages
          path: ./release-packages
         
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-packages
          path: ./release-packages

  
